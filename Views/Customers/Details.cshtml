@model Microfinance.Models.Business.Customer

@{
    ViewData["Title"] = "Detalles del Cliente";
}

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="h4 mb-0"><i class="fas fa-user-tie me-2"></i>Detalles del Cliente</h2>
                <div>
                    <span class="badge @(Model.IsActive ? "bg-success" : "bg-secondary") me-2">
                        @(Model.IsActive ? "Activo" : "Inactivo")
                    </span>
                    @if(Model.IsDeleted) {
                        <span class="badge bg-danger">Eliminado</span>
                    }
                </div>
            </div>
        </div>
        
        <div class="card-body">
            <div class="row">
                <!-- Columna Izquierda - Información Básica -->
                <div class="col-md-6">
                    <div class="mb-4">
                        <h5 class="text-primary border-bottom pb-2"><i class="fas fa-id-card me-2"></i>Información Personal</h5>
                        <dl class="row">
                            <dt class="col-sm-4 text-muted">Nombre Completo:</dt>
                            <dd class="col-sm-8">@Model.FullName</dd>
                            
                            <dt class="col-sm-4 text-muted">Cédula/RUC:</dt>
                            <dd class="col-sm-8">@Model.IdCard</dd>
                            
                            <dt class="col-sm-4 text-muted">Teléfono:</dt>
                            <dd class="col-sm-8">@Model.PhoneNumber</dd>
                        </dl>
                    </div>
                </div>
                
                <!-- Columna Derecha - Información Adicional -->
                <div class="col-md-6">
                    <div class="mb-4">
                        <h5 class="text-primary border-bottom pb-2"><i class="fas fa-map-marker-alt me-2"></i>Información de Contacto</h5>
                        <dl class="row">
                            <dt class="col-sm-4 text-muted">Dirección:</dt>
                            <dd class="col-sm-8">@Model.Address</dd>
                            
                            <dt class="col-sm-4 text-muted">Correo Electrónico:</dt>
                            <dd class="col-sm-8">@Model.Email</dd>
                            
                        </dl>
                    </div>
                </div>
            </div>
            
            <div class="mt-4">
                <h5 class="text-primary border-bottom pb-2 mb-3">
                    <i class="fas fa-receipt me-2"></i>Historial de Prestamos
                </h5>
        
                <div id="loansGrid" style="height: 300px; width:100%;" class="ag-theme-alpine"></div>
            </div>
            
            <!-- Sección de Acciones -->
            <div class="d-flex flex-column flex-md-row justify-content-between mt-4 pt-3 border-top">
                <a asp-action="Index" class="btn btn-outline-secondary  ">
                    <i class="fas fa-arrow-left me-2"></i>Volver al Listado
                </a>
                <div class="d-flex flex-column flex-md-row gap-2">
                    
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {

            function actionsCellRenderer(params) {
                const loanId = params.data.loanId;
                return `
                <a class="link-secondary" href="/Loans/Details/${loanId}">Detalles</a> 
            `;
            }

            const columnDefs = [
                {
                    headerName: "Capital",
                    field: "principalAmount",
                    valueFormatter: params => `C$${params.value.toFixed(2)}`,
                    type: 'numericColumn',
                    cellClass: 'text-end'
                },
                {
                    headerName: "Total",
                    field: "totalAmount",
                    valueGetter: params => {
                        const principal = params.data.principalAmount || 0;
                        const normalInterest = params.data.normalInterestAmount || 0;
                        const lateInterest = params.data.lateInterestAmount || 0;
                        return principal + normalInterest + lateInterest;
                    },
                    valueFormatter: params => `C$${params.value.toFixed(2)}`,
                    type: 'numericColumn',
                    cellClass: 'text-end'
                },
                {
                    headerName: "Vencimiento",
                    field: "dueDate",
                    valueFormatter: params => new Date(params.value).toLocaleDateString('es-ES')
                },
                {
                    headerName: "Frecuencia Pago",
                    field: "paymentFrequency"
                },
                {
                    headerName: "Estado",
                    field: "loanStatus",
                    cellRenderer: params => {
                        const status = params.value;
                        let badgeClass = 'bg-secondary';
                        if (status === 'Activo') badgeClass = 'bg-success';
                        if (status === 'Vencido') badgeClass = 'bg-warning text-dark';
                        if (status === 'Cancelado') badgeClass = 'bg-primary';
                        return `<span class="badge ${badgeClass}">${status}</span>`;
                    }
                },
                {
                    headerName: "Acciones",
                    cellRenderer: actionsCellRenderer,
                    width: 150,
                    sortable: false,
                    filter: false
                }
            ];

            const loansData = @Html.Raw(Json.Serialize(Model.Loans));
            
            
            const gridOptions = getGridOptions(columnDefs, loansData);

            const gridDiv = document.querySelector('#loansGrid');
            new agGrid.createGrid(gridDiv, gridOptions);
        });
    </script>
}