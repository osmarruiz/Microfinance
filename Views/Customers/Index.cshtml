@model IEnumerable<Microfinance.Models.Business.Customer>

@{
    ViewData["Title"] = "Clientes";
}

<div class="d-flex justify-content-between align-items-center mb-4 ">
    
    <h1 class="mb-0 text-white">@ViewData["Title"]</h1>

    @if (!User.IsInRole("Consultant"))
    {
        <a class="mb-0 btn btn-primary" asp-action="Create">Registrar un cliente</a>
    }
  
</div>

@* Contenedor para AG-Grid *@
<div id="customerGrid"  style="height: 700px"></div>

@section Scripts {
    <script>
        // Función para crear el renderizador de celdas para las acciones (Edit, Details, Delete)
        


        function actionsCellRenderer(params) {
            const customerId = params.data.customerId;
            let actionsHtml = `<a class="link-secondary" href="/Customers/Details/${customerId}">Detalles</a>`;
            // Verificar si el usuario es admin (necesitas pasar esta información al frontend)
            if (window.currentUser && window.currentUser.isAdmin) {
                actionsHtml += ` | <a class="link-primary" href="/Customers/Edit/${customerId}">Editar</a>`;
                actionsHtml += ` | <a class="link-danger" href="/Customers/Delete/${customerId}">Borrar</a>`;
            }

            return actionsHtml;
        }

        // Definición de las columnas de la grilla AG-Grid
        const columnDefs = [

            { headerName: "ID Cliente", field: "customerId", sortable: true,
                type: 'numericColumn' }, 
            { headerName: "Nombre Completo", field: "fullName", sortable: true, filter: true },
            { headerName: "Cédula", field: "idCard", sortable: true, filter: true },
            { headerName: "Teléfono", field: "phoneNumber", sortable: true }, 
            { headerName: "Dirección", field: "address", sortable: true, filter: true },
            { headerName: "Correo Electrónico", field: "email", sortable: true, filter: true }, 
            { headerName: "Activo", field: "isActive", sortable: true},
            {
                headerName: "Acciones",
                field: "actions",
                cellRenderer: actionsCellRenderer, 
                sortable: false, 
                filter: false 
            }
        ];
        
        const gridOptions = getGridOptions(columnDefs, @Html.Raw(Json.Serialize(Model)));

        const gridDiv = document.querySelector('#customerGrid');

        if (gridDiv) {
            const api = agGrid.createGrid(gridDiv, gridOptions);

            
        } else {
            console.error('El elemento #customerGrid no fue encontrado en el DOM.');
        }
    </script>
}