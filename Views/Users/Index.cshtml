@model IEnumerable<Microfinance.ViewModels.UserManagement.UserRolesViewModel>

@{
    ViewData["Title"] = "Gestión de Usuarios";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">@ViewData["Title"]</h1>
    <a asp-action="Create" class="btn btn-primary">Crear Nuevo Usuario</a>
</div>

@* Contenedor para AG-Grid *@
<div id="userGrid" style="height: 700px;"></div>

@section Scripts {
    <script>
        // Función para crear el renderizador de celdas para las acciones
        function actionsCellRenderer(params) {
            const userId = params.data.userId;
            const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
            let buttons = `
                <a class="link-primary" href="/Users/Edit/${userId}">Editar</a> |
                <a class="link-info" href="/Users/ManageRoles/${userId}">Roles</a> |
            `;

            if (params.data.isLockedOut) {
                buttons += `
                    <form action="/Users/Unlock/${userId}" method="post" class="d-inline">
                        <input type="hidden" name="__RequestVerificationToken" value="${antiForgeryToken}" />
                        <button type="submit" class="link-success" style="background:none;border:none;padding:0;color:#198754;cursor:pointer">Desbloquear</button>
                    </form> 
                `;
            } else {
                buttons += `
                    <form action="/Users/Lock/${userId}" method="post" class="d-inline">
                        <input type="hidden" name="__RequestVerificationToken" value="${antiForgeryToken}" />
                        <button type="submit" class="link-danger" style="background:none;border:none;padding:0;color:#dc3545;cursor:pointer">Bloquear</button>
                    </form> 
                `;
            }

            return buttons;
        }

        // Definición de las columnas de la grilla AG-Grid
        const columnDefs = [
            {headerName: "Email", field: "email", sortable: true, filter: true},
            {
                headerName: "Numero de Teléfono",
                field: "phoneNumber",
                sortable: true,
                
            },
            {
                headerName: "Roles",
                field: "roles",
                sortable: true,
                filter: true,
                valueGetter: params => params.data.roles.join(", ")
            },
            {
                headerName: "Estado",
                field: "isLockedOut",
                sortable: true,
                cellRenderer: params => params.value ?
                    '<span class="badge bg-danger">Bloqueado</span>' :
                    '<span class="badge bg-success">Activo</span>'
            },
            {
                headerName: "Acciones",
                field: "actions",
                cellRenderer: actionsCellRenderer,
                sortable: false,
                filter: false,
                width: 400
            }
        ];

        const gridOptions = getGridOptions(columnDefs, @Html.Raw(Json.Serialize(Model)));
        const gridDiv = document.querySelector('#userGrid');

        if (gridDiv) {
            const api = agGrid.createGrid(gridDiv, gridOptions);


        } else {
            console.error('El elemento #customerGrid no fue encontrado en el DOM.');
        }
    </script>
}