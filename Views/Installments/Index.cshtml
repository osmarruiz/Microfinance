@model IEnumerable<Microfinance.Models.Business.Installment>

@{
    ViewData["Title"] = "Cuotas";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Listado de Cuotas</h1>
</div>

<div id="installmentGrid" class="ag-theme-alpine" style="height: 700px;"></div>

@section Scripts {
    <script>
        // Definición de columnas (reutilizando el estilo de AuditLog)
        const columnDefs = [
            { 
                headerName: "Préstamo", 
                field: "loan.loanId",
                valueGetter: params => params.data.loan?.loanId || '',
                width: 120
            },
            { 
                headerName: "Cuota N°", 
                field: "installmentNumber",
                width: 100
            },
            {
                headerName: "Monto Total",
                field: "installmentAmount",
                valueFormatter: params => `$${params.value.toFixed(2)}`,
                width: 120,
                cellClass: 'text-end',
                type: 'numericColumn'
            },
            {
                headerName: "Pagado",
                field: "paidAmount",
                valueFormatter: params => `$${params.value.toFixed(2)}`,
                width: 120,
                cellClass: 'text-end',
                type: 'numericColumn'
            },
            {
                headerName: "Saldo Pendiente",
                valueGetter: params => params.data.installmentAmount - params.data.paidAmount,
                valueFormatter: params => {
                    const balance = params.value;
                    return `<span style="color: ${balance > 0 ? '#d32f2f' : '#388e3c'}">$${balance.toFixed(2)}</span>`;
                },
                width: 130,
                cellClass: 'text-end',
                type: 'numericColumn',
                filter: 'agNumberColumnFilter',
                comparator: (valueA, valueB) => valueA - valueB
            },
            { 
                headerName: "Vencimiento", 
                field: "dueDate",
                valueFormatter: params => new Date(params.value).toLocaleDateString('es-ES'),
                filter: 'agDateColumnFilter',
                width: 150
            },
            { 
                headerName: "Estado", 
                field: "installmentStatus",
                cellRenderer: params => {
                    const status = params.value;
                    let badgeClass = 'bg-secondary';
                    if (status === 'Pendiente') badgeClass = 'bg-warning';
                    if (status === 'Pagada') badgeClass = 'bg-success';
                    if (status === 'Vencida') badgeClass = 'bg-danger';
                    return `<span class="badge ${badgeClass}">${status}</span>`;
                },
                width: 130
            },
            {
                headerName: "Detalle",
                cellRenderer: params => `
                    <button onclick="viewDetails(${params.data.installmentId})" 
                            class="btn btn-sm btn-outline-primary">
                    </button>`,
                width: 100,
                sortable: false,
                filter: false
            }
        ];

        // Reutilizamos la misma función getGridOptions (debe estar definida globalmente)
        const gridOptions = getGridOptions(columnDefs, @Html.Raw(Json.Serialize(Model)));
        

        const gridDiv = document.querySelector('#installmentGrid');

        if (gridDiv) {
            const api = agGrid.createGrid(gridDiv, gridOptions);


        } else {
            console.error('El elemento #auditGrid no fue encontrado en el DOM.');
        }
    </script>
}