@model IEnumerable<Microfinance.Models.Business.Installment>

@{
    ViewData["Title"] = "Listado de Cuotas";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0 text-white">@ViewData["Title"]</h1>
</div>

<div id="installmentGrid" class="ag-theme-alpine" style="height: 700px;"></div>

@section Scripts {
    <script>
        function actionsCellRenderer(params) {
            const installmentId = params.data.installmentId;
            return `
                <a class="link-secondary" href="/Installments/Details/${installmentId}">Detalles</a> 
            `;
        }
        
        
        const columnDefs = [
            { 
                headerName: "Préstamo", 
                field: "loan.loanId",
                valueGetter: params => params.data.loan?.loanId || '',
                width: 120,
                sort: 'asc',
                type: 'numericColumn'
            },
            { 
                headerName: "Cuota N°", 
                field: "installmentNumber",
                width: 100,
                sort: 'asc',
                type: 'numericColumn'
            },
            {
                headerName: "Monto Total",
                field: "principalAmount",
                valueGetter: params => `C$${((params.data.principalAmount || 0) + (params.data.normalInterestAmount || 0) + (params.data.lateInterestAmount || 0)).toFixed(2)}`,
                width: 120,
                cellClass: 'text-end',
                type: 'numericColumn'
            },
            {
                headerName: "Pagado",
                field: "paidAmount",
                valueFormatter: params => `C$${params.value.toFixed(2)}`,
                width: 120,
                cellClass: 'text-end',
                type: 'numericColumn'
            },
            {
                headerName: "Saldo Pendiente",
                valueGetter: params => ((params.data.principalAmount || 0) + (params.data.normalInterestAmount || 0) + (params.data.lateInterestAmount || 0)) - (params.data.paidAmount || 0),
                cellRenderer: params => {
                    const balance = Number(params.value) || 0;
                    const span = document.createElement('span');
                    span.style.color = balance > 0 ? '#d32f2f' : '#388e3c';
                    span.style.fontWeight = 'bold';
                    span.textContent = `C$${balance.toFixed(2)}`;
                    return span;
                },
                cellClass: 'text-end',
                type: 'numericColumn',
                comparator: (valueA, valueB) => Number(valueA) - Number(valueB) // Para ordenamiento correcto
            },
            { 
                headerName: "Vencimiento", 
                field: "dueDate",
                valueFormatter: params => new Date(params.value).toLocaleDateString('es-ES'),
                filter: 'agDateColumnFilter',
                width: 150
            },
            { 
                headerName: "Estado", 
                field: "installmentStatus",
                cellRenderer: params => {
                    const status = params.value;
                    let badgeClass = 'bg-secondary';
                    if (status === 'Pendiente') badgeClass = 'bg-warning';
                    if (status === 'Pagada') badgeClass = 'bg-success';
                    if (status === 'Vencida') badgeClass = 'bg-danger';
                    return `<span class="badge ${badgeClass}">${status}</span>`;
                },
                width: 130
            },
            {
                headerName: "Acciones",
                cellRenderer: actionsCellRenderer,
                width: 100,
                sortable: false,
                filter: false
            }
        ];

        // Reutilizamos la misma función getGridOptions (debe estar definida globalmente)
        const gridOptions = getGridOptions(columnDefs, @Html.Raw(Json.Serialize(Model)));
        

        const gridDiv = document.querySelector('#installmentGrid');

        if (gridDiv) {
            const api = agGrid.createGrid(gridDiv, gridOptions);
            

        } else {
            console.error('El elemento #auditGrid no fue encontrado en el DOM.');
        }
    </script>
}