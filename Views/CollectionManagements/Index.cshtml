@model IEnumerable<Microfinance.Models.Business.CollectionManagement>

@{
    ViewData["Title"] = "Gestión de Cobranza"; // Título más descriptivo
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Listado de Gestiones de Cobranza</h1>
</div>

<div id="collectionManagementGrid" class="ag-theme-alpine" style="height: 700px; width: 100%;"></div>

@section Scripts {
    <script>
        function utcToLocalDateString(utcDateString) {
            if (!utcDateString) return '';
            try {
                const date = new Date(utcDateString);
                if (isNaN(date.getTime())) {
                    return '';
                }
                return date.toLocaleDateString('es-ES'); 
            } catch (e) {
                console.error("Error al parsear fecha UTC:", utcDateString, e);
                return '';
            }
        }

        // Definición de columnas para la tabla de Gestión de Cobranza
        const collectionManagementColumnDefs = [
            { 
                headerName: "Fecha de Gestión", 
                field: "managementDate",
                valueFormatter: params => utcToLocalDateString(params.value),
                filter: 'agDateColumnFilter',
                width: 150
            },
            {
                headerName: "Resultado",
                field: "managementResult",
                width: 200,
                filter: true // Habilitar filtro de texto
            },
            { 
                headerName: "Notas", 
                field: "notes",
                width: 300,
                // Opcional: limitar el texto y mostrar tooltip
                cellRenderer: params => {
                    const notes = params.value || '';
                    const maxLength = 50; // Limite de caracteres para mostrar directamente
                    if (notes.length > maxLength) {
                        return `<span title="${notes}">${notes.substring(0, maxLength)}...</span>`;
                    }
                    return notes;
                },
                filter: true 
            },
            { 
                headerName: "Préstamo ID", 
                field: "loan.loanId", // Asumiendo que CollectionManagement tiene una propiedad Loan
                valueGetter: params => params.data.loan?.loanId || '',
                width: 120,
                type: 'numericColumn'
            },
            { 
                headerName: "Cobrador (ID)", 
                field: "collector.id", // Asumiendo que CollectionManagement tiene una propiedad Collector
                valueGetter: params => params.data.collector?.fullName || params.data.collector?.id || '',
                width: 150
            },
            { 
                headerName: "¿Eliminado?", 
                field: "isDeleted",
                cellRenderer: params => params.value ? 'Sí' : 'No', // Convertir booleano a texto
                width: 100,
                filter: true 
            },
            {
                headerName: "Acciones",
                cellRenderer: params => `
                    <div class="d-flex justify-content-center">
                        <a href="/CollectionManagement/Edit/${params.data.collectionId}" class="btn btn-sm btn-outline-warning me-1" title="Editar">
                            <i class="bi bi-pencil"></i>
                        </a>
                        <a href="/CollectionManagement/Details/${params.data.collectionId}" class="btn btn-sm btn-outline-info me-1" title="Detalles">
                            <i class="bi bi-info-circle"></i>
                        </a>
                        <a href="/CollectionManagement/Delete/${params.data.collectionId}" class="btn btn-sm btn-outline-danger" title="Eliminar">
                            <i class="bi bi-trash"></i>
                        </a>
                    </div>`,
                width: 180,
                sortable: false,
                filter: false
            }
        ];

        document.addEventListener('DOMContentLoaded', function() {

            const collectionManagementGridDiv = document.querySelector('#collectionManagementGrid');

            if (collectionManagementGridDiv) {
                const rowData = @Html.Raw(Json.Serialize(Model));
                const collectionManagementGridOptions = getGridOptions(collectionManagementColumnDefs, rowData);
                agGrid.createGrid(collectionManagementGridDiv, collectionManagementGridOptions);
            } else {
                console.error('El elemento #collectionManagementGrid no fue encontrado en el DOM.');
            }
        });
    </script>
}