@model Microfinance.Models.Business.Loan

@{
    ViewData["Title"] = "Detalles del Préstamo";
}

<div class="container mt-4">
    <div class="card shadow">
        <div class="card-header bg-primary text-white">
            <div class="d-flex justify-content-between align-items-center">
                <h2 class="h4 mb-0"><i class="fas fa-hand-holding-usd me-2"></i>Detalles del Préstamo</h2>
                <div>
                    <span class="badge @(Model.LoanStatus == "Activo" ? "bg-success" : "bg-warning") me-2">
                        @Model.LoanStatus
                    </span>
                    @if(Model.IsDeleted) {
                        <span class="badge bg-danger">Eliminado</span>
                    }
                </div>
            </div>
        </div>
        
        <div class="card-body">
            <div class="row">
                <!-- Columna Izquierda - Información Básica -->
                <div class="col-md-6">
                    <div class="mb-4">
                        <h5 class="text-primary border-bottom pb-2"><i class="fas fa-info-circle me-2"></i>Información del Préstamo</h5>
                        <dl class="row">
                            <dt class="col-sm-4 text-muted">Capital:</dt>
                            <dd class="col-sm-8">C$@Model.PrincipalAmount</dd>
                            
                            <dt class="col-sm-4 text-muted">Intereses:</dt>
                            <dd class="col-sm-8">C$@Model.NormalInterestAmount</dd>
                            
                            <dt class="col-sm-4 text-muted">Intereses Moratorio:</dt>
                            <dd class="col-sm-8">C$@Model.LateInterestAmount</dd>
                            
                            <dt class="col-sm-4 text-muted">Tasa de Interés:</dt>
                            <dd class="col-sm-8">@Model.MonthlyInterestRate.ToString("0.00")%</dd>
                            
                            <dt class="col-sm-4 text-muted">Plazo:</dt>
                            <dd class="col-sm-8">@Model.TermMonths meses</dd>
                        </dl>
                    </div>
                </div>
                
                <!-- Columna Derecha - Información Adicional -->
                <div class="col-md-6">
                    <div class="mb-4">
                        <h5 class="text-primary border-bottom pb-2"><i class="fas fa-calendar-alt me-2"></i>Fechas y Frecuencia</h5>
                        <dl class="row">
                            <dt class="col-sm-4 text-muted">Fecha de Inicio:</dt>
                            <dd class="col-sm-8">@Model.StartDate.ToString("dd/MM/yyyy")</dd>
                            
                            <dt class="col-sm-4 text-muted">Fecha de Vencimiento:</dt>
                            <dd class="col-sm-8">@Model.DueDate.ToString("dd/MM/yyyy")</dd>
                            
                            <dt class="col-sm-4 text-muted">Frecuencia de Pago:</dt>
                            <dd class="col-sm-8">@Model.PaymentFrequency</dd>
                            
                        </dl>
                    </div>
                </div>
            </div>
            
            <!-- Sección de Relaciones -->
            <div class="row mt-3">
                <div class="col-md-6">
                    <div class="mb-4">
                        <h5 class="text-primary border-bottom pb-2"><i class="fas fa-user-tie me-2"></i>Cliente</h5>
                        <dl class="row">
                            <dt class="col-sm-4 text-muted">Nombre:</dt>
                            <dd class="col-sm-8">
                                <a asp-controller="Customers" asp-action="Details" asp-route-id="@Model.Customer.CustomerId" class="link-primary">
                                    @Model.Customer.FullName
                                </a>
                            </dd>
                            <dt class="col-sm-4 text-muted">Cédula/RUC:</dt>
                            <dd class="col-sm-8">@Model.Customer.IdCard</dd>
                        </dl>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="mb-4">
                        <h5 class="text-primary border-bottom pb-2"><i class="fas fa-user-shield me-2"></i>Vendedor</h5>
                        <dl class="row">
                            <dt class="col-sm-4 text-muted">Nombre:</dt>
                            <dd class="col-sm-8">
                                    @Model.Seller.UserName
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
            
            <!-- Sección del DataGrid de Cuotas -->
            <div class="mt-4 pt-3">
                <h5 class="text-primary border-bottom pb-2 mb-3">
                    <i class="fas fa-file-invoice-dollar me-2"></i>Cuotas del Préstamo
                </h5>
                
                <div id="installmentGrid" class="ag-theme-alpine" style="height: 400px;"></div>
            </div>
            
            <!-- Sección de Acciones -->
            <div class="d-flex flex-column flex-md-row justify-content-between mt-4 pt-3 border-top">
                <button class="btn btn-outline-secondary" onclick="window.history.back()">
                    <i class="fas fa-arrow-left me-2"></i>Volver
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {

            function actionsCellRenderer(params) {
                const installmentId = params.data.installmentId;
                return `
                <a class="link-secondary" href="/Installments/Details/${installmentId}">Detalles</a> 
            `;
            }
            
            const columnDefs = [
                {
                    headerName: "Cuota N°",
                    field: "installmentNumber",
                    width: 100,
                    sort: 'asc',
                    type: 'numericColumn'
                },
                {
                    headerName: "Monto Total",
                    field: "principalAmount",
                    valueGetter: params => `C$${((params.data.principalAmount || 0) + (params.data.normalInterestAmount || 0) + (params.data.lateInterestAmount || 0)).toFixed(2)}`,
                    width: 120,
                    cellClass: 'text-end',
                    type: 'numericColumn'
                },
                {
                    headerName: "Pagado",
                    field: "paidAmount",
                    valueFormatter: params => `C$${params.value.toFixed(2)}`,
                    width: 120,
                    cellClass: 'text-end',
                    type: 'numericColumn'
                },
                {
                    headerName: "Saldo Pendiente",
                    valueGetter: params => ((params.data.principalAmount || 0) + (params.data.normalInterestAmount || 0) + (params.data.lateInterestAmount || 0)) - (params.data.paidAmount || 0),
                    cellRenderer: params => {
                        const balance = Number(params.value) || 0;
                        const span = document.createElement('span');
                        span.style.color = balance > 0 ? '#d32f2f' : '#388e3c';
                        span.style.fontWeight = 'bold';
                        span.textContent = `C$${balance.toFixed(2)}`;
                        return span;
                    },
                    cellClass: 'text-end',
                    type: 'numericColumn',
                    comparator: (valueA, valueB) => Number(valueA) - Number(valueB) // Para ordenamiento correcto
                },
                {
                    headerName: "Vencimiento",
                    field: "dueDate",
                    valueFormatter: params => new Date(params.value).toLocaleDateString('es-ES'),
                    width: 150
                },
                {
                    headerName: "Estado",
                    field: "installmentStatus",
                    cellRenderer: params => {
                        const status = params.value;
                        let badgeClass = 'bg-secondary';
                        if (status === 'Pendiente') badgeClass = 'bg-warning';
                        if (status === 'Pagada') badgeClass = 'bg-success';
                        if (status === 'Vencida') badgeClass = 'bg-danger';
                        return `<span class="badge ${badgeClass}">${status}</span>`;
                    },
                    width: 130
                },
                {
                    headerName: "Acciones",
                    cellRenderer: actionsCellRenderer,
                    width: 100,
                    sortable: false,
                    filter: false
                }
            ];

            // Obtener solo las cuotas de este préstamo
            const installmentsData = @Html.Raw(Json.Serialize(Model.Installments));

            console.log(@Html.Raw(Json.Serialize(Model)));
            const gridOptions = getGridOptions(columnDefs, installmentsData);

            const gridDiv = document.querySelector('#installmentGrid');
            if (gridDiv) {
                new agGrid.createGrid(gridDiv, gridOptions);
            }
        });
    </script>
}