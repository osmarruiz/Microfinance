@model IEnumerable<Microfinance.Models.Business.Loan>

@{
    ViewData["Title"] = "Préstamos";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Préstamos</h1>
    <a class="mb-0 btn btn-primary" asp-action="Create">
        <i class="fas fa-plus"></i> Nuevo Préstamo
    </a>
</div>

<div id="loanGrid" class="ag-theme-alpine" style="height: 700px;"></div>

@section Scripts {
    <script>
        function actionsCellRenderer(params) {
            const loanId = params.data.loanId;
            return `
                <a class="link-secondary" href="/Loans/Details/${loanId}">Detalles</a> |
                <a class="link-danger" href="/Loans/Delete/${loanId}">Borrar</a>
            `;
        }

        const columnDefs = [
            {
                headerName: "Monto",
                field: "amount",
                filter: 'agNumberColumnFilter',
                valueFormatter: params => `C$${params.value.toLocaleString('es-NI')}`
            },
            {
                headerName: "Saldo Actual",
                field: "currentBalance",
                filter: 'agNumberColumnFilter',
                valueFormatter: params => `C$${params.value.toLocaleString('es-NI')}`
            },
            {
                headerName: "Vencimiento",
                field: "dueDate",
                filter: 'agDateColumnFilter',
                valueFormatter: params => new Date(params.value).toLocaleDateString('es-ES')
            },
            {
                headerName: "Frecuencia Pago",
                field: "paymentFrequency"
            },
            {
                headerName: "Estado",
                field: "loanStatus",
                cellRenderer: params => {
                    const status = params.value;
                    let badgeClass = 'bg-secondary';
                    if (status === 'Activo') badgeClass = 'bg-success';
                    if (status === 'Vencido') badgeClass = 'bg-warning text-dark';
                    if (status === 'Cancelado') badgeClass = 'bg-primary';
                    return `<span class="badge ${badgeClass}">${status}</span>`;
                }
            },
            {
                headerName: "Cliente",
                field: "customer.fullName",
                cellRenderer: function(params) {
                    const link = document.createElement('a');
                    link.href = `/Customers/Details/${params.data.customer.customerId}`; 
                    link.className = 'link-primary';
                    link.textContent = params.value; 
                    link.style.cursor = 'pointer'; 

                    return link;
                }
            },
            {
                headerName: "Vendedor",
                field: "seller.userName",
            },
            {
                headerName: "Acciones",
                cellRenderer: actionsCellRenderer,
                width: 150,
                sortable: false,
                filter: false
            }
        ];
        
        console.log(@Html.Raw(Json.Serialize(Model)));
        const gridOptions = getGridOptions(columnDefs, @Html.Raw(Json.Serialize(Model)));

        const gridDiv = document.querySelector('#loanGrid');

        if (gridDiv) {
            const api = agGrid.createGrid(gridDiv, gridOptions);


        } else {
            console.error('El elemento #loanGrid no fue encontrado en el DOM.');
        }
    </script>
}