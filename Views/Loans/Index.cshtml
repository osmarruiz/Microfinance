@model IEnumerable<Microfinance.Models.Business.Loan>

@{
    ViewData["Title"] = "Préstamos";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0 text-white">@ViewData["Title"]</h1>
    
    @if (!User.IsInRole("Consultant"))
    {
      
        <a class="mb-0 btn btn-primary" asp-action="Create">
            <i class="fas fa-plus"></i> Nuevo Préstamo
        </a>  
    }
</div>

<div id="loanGrid" class="ag-theme-alpine" style="height: 700px;"></div>

@section Scripts {
    <script>

        window.isAdmin = @Json.Serialize(ViewData["IsAdmin"]);
        
        function actionsCellRenderer(params) {
            const loanId = params.data.loanId;
            let actionsHtml = `<a class="link-secondary" href="/Loans/Details/${loanId}">Detalles</a>`;

            // Verificar si el usuario es admin (necesitas pasar esta información al frontend)
            if (window.isAdmin) {
                actionsHtml += ` | <a class="link-danger" href="/Loans/Delete/${loanId}">Borrar</a>`;
            }

            return actionsHtml;
        }

        const columnDefs = [
            {
                headerName: "ID Préstamo",
                field: "loanId",
                type: 'numericColumn'
            },
            {
                headerName: "Capital", 
                field: "principalAmount",
                valueFormatter: params => `C$${params.value.toFixed(2)}`,
                type: 'numericColumn',
                cellClass: 'text-end'
            },
            {
                headerName: "Intereses",
                field: "normalInterestAmount",
                valueFormatter: params => `C$${params.value.toFixed(2)}`,
                type: 'numericColumn',
                cellClass: 'text-end'
            },
            {
                headerName: "Intereses moratorio",
                field: "lateInterestAmount",
                valueFormatter: params => `C$${params.value.toFixed(2)}`,
                type: 'numericColumn',
                cellClass: 'text-end'
            },
            {
                headerName: "Total",
                field: "totalAmount",
                valueGetter: params => {
                    const principal = params.data.principalAmount || 0;
                    const normalInterest = params.data.normalInterestAmount || 0;
                    const lateInterest = params.data.lateInterestAmount || 0;
                    return principal + normalInterest + lateInterest;
                },
                valueFormatter: params => `C$${params.value.toLocaleString('es-NI')}`,
                type: 'numericColumn',
                cellClass: 'text-end'
            },
            {
                headerName: "Vencimiento",
                field: "dueDate",
                filter: 'agDateColumnFilter',
                valueFormatter: params => new Date(params.value).toLocaleDateString('es-ES')
            },
            {
                headerName: "Frecuencia Pago",
                field: "paymentFrequency"
            },
            {
                headerName: "Estado",
                field: "loanStatus",
                cellRenderer: params => {
                    const status = params.value;
                    let badgeClass = 'bg-secondary';
                    if (status === 'Activo') badgeClass = 'bg-success';
                    if (status === 'Vencido') badgeClass = 'bg-warning text-dark';
                    if (status === 'Cancelado') badgeClass = 'bg-primary';
                    return `<span class="badge ${badgeClass}">${status}</span>`;
                }
            },
            {
                headerName: "Cliente",
                field: "customer.fullName",
                filter: 'agTextColumnFilter',
                cellRenderer: function(params) {
                    const link = document.createElement('a');
                    link.href = `/Customers/Details/${params.data.customer.customerId}`; 
                    link.className = 'link-primary';
                    link.textContent = params.value; 
                    link.style.cursor = 'pointer'; 

                    return link;
                }
            },
            {
                headerName: "Vendedor",
                filter: 'agTextColumnFilter',
                field: "seller.userName",
            },
            {
                headerName: "Acciones",
                cellRenderer: actionsCellRenderer,
                width: 150,
                sortable: false,
                filter: false
            }
        ];
        
        const gridOptions = getGridOptions(columnDefs, @Html.Raw(Json.Serialize(Model)));

        const gridDiv = document.querySelector('#loanGrid');

        if (gridDiv) {
            const api = agGrid.createGrid(gridDiv, gridOptions);


        } else {
            console.error('El elemento #loanGrid no fue encontrado en el DOM.');
        }
    </script>
}